{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoing.js","Request.js","Todolist/Todolist.js","showTime.js","index.js"],"names":["Todoinput","handleInput","e","keyCode","props","addTodo","target","value","handleChange","setState","name","parseInt","state","n1","style","color","fontSize","htmlFor","id","onChange","this","onKeyDown","type","n2","dangerouslySetInnerHTML","__html","Component","Todoing","a","className","todo","map","item","key","onClick","delTodo","Request","data","fetch","then","res","json","result","console","log","index","album_title","author","ReactDOM","render","document","getElementById","React","createElement"],"mappings":"uOA+BqBA,E,YACjB,aAAc,IAAD,8BACT,+CAOJC,YAAY,SAACC,GACM,KAAZA,EAAEC,SACD,EAAKC,MAAMC,QAAQH,EAAEI,OAAOC,QAVvB,EAabC,aAAa,SAACN,GACV,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMC,SAAyB,IAAhBT,EAAEI,OAAOC,MAAU,EAAEL,EAAEI,OAAOC,UAb3D,EAAKK,MAAL,aACIC,GAAG,GADP,KAEO,GAJE,E,sEAmBH,IAAD,OACL,OACI,6BACI,2BAAOC,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAKC,QAAQ,OAAjD,gBACA,2BAAOC,GAAG,MAAMR,KAAK,KAAKS,SAAUC,KAAKZ,aAAcD,MAAOa,KAAKR,MAAMC,GAAIQ,UAAW,SAACnB,GAAD,OAAK,EAAKD,YAAYC,IAAIoB,KAAK,SAF3H,IAII,2BAAOZ,KAAK,KAAKS,SAAUC,KAAKZ,aAAcD,MAAOa,KAAKR,MAAMW,GAAIF,UAAW,SAACnB,GAAD,OAAK,EAAKD,YAAYC,IAAIoB,KAAK,SAC9G,uBAAGE,wBAAyB,CAACC,OAAOL,KAAKR,MAAMC,GAAGO,KAAKR,SACvD,qD,GA5BuBc,aC7BlBC,E,iLAGP,IAAD,OACL,OACI,6BACI,uDAASP,KAAKhB,MAAMwB,GACpB,wBAAIC,UAAU,QAEVT,KAAKhB,MAAM0B,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAChB,wBAAIA,IAAKA,GAAMD,EAAf,MACG,4BAAQE,QAAS,kBAAI,EAAK9B,MAAM+B,QAAQF,KAAxC,0B,GAXUP,aCAhBU,GCKiBV,Y,mBDJlC,aAAc,IAAD,8BACT,+CACKd,MAAQ,CACTyB,KAAK,IAHA,E,iFAMO,IAAD,OAQfC,MAAM,uDACLC,MAAK,SAACC,GACH,OAAOA,EAAIC,UACZF,MAAK,SAACC,GAEL,EAAK/B,SAAS,CACV4B,KAAMG,EAAIE,SAEbC,QAAQC,IAAIJ,Q,+BAIjB,OACI,6BACI,wDACA,4BAEQpB,KAAKR,MAAMyB,KAAKN,KACZ,SAACC,EAAKa,GAAN,OACI,wBAAIZ,IAAKY,GACL,4BAAKb,EAAKc,aACV,2BAAId,EAAKe,kB,GApCRrB,c,QECdA,Y,OCYvBsB,IAASC,OACR,kBAAC,EAAD,MAAYC,SAASC,eAAe,SAuB3BC,IAAMC,cACZ,MACA,CAAC,GAAK,OACN,cACAD,IAAMC,cACF,KACA,CAAC,GAAK,QACN,W","file":"static/js/main.4cc3ec6f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n//子组件->父组件传递数据，调用子组件时往子组件传递一个函数\r\n//子组件通过props调用该函数\r\n\r\n//受控组件和非受控组件\r\n\r\n//非受控组件\r\n//代码简单 比较适合用于一次性获取表单的值\r\n// export default class Todoinput extends Component {\r\n//     componentDidMount(){\r\n//         console.log(this.inp.value);\r\n//         //console.log(this)\r\n//     }\r\n//     search=()=>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n        \r\n//         return (\r\n//             <div>\r\n//                 <input  ref={(inp)=>this.inp=inp} type='text'/>\r\n//                 <button onClick={this.search}>查询</button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n//受控组件：value值被react的state控制\r\n//可以方便拿到input框的值，实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            n1:0,\r\n            n1:0\r\n        }\r\n    }\r\n\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value==''?0:e.target.value),\r\n          \r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <lable style={{color:'red',fontSize:50}} htmlFor=\"inp\">输入</lable>\r\n                <input id='inp' name='n1' onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type='text'/>\r\n                +\r\n                <input name='n2' onChange={this.handleChange} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type='text'/>\r\n                <p dangerouslySetInnerHTML={{__html:this.state.n1+this.state}}></p>\r\n                <button >查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n                <ul className=\"list\">\r\n                {\r\n                    this.props.todo.map((item,key)=>\r\n                        <li key={key}>{item}\r\n                        ---<button onClick={()=>this.props.delTodo(key)}>删除</button>\r\n                        </li>\r\n                    )\r\n\r\n                }\r\n                </ul>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         console.log(res.data);\r\n        //         this.setState({\r\n        //             data: res.data.result\r\n        //         })\r\n        //     })\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        .then((res)=> {\r\n            return res.json();\r\n        }).then((res)=>{\r\n            \r\n            this.setState({\r\n                data: res.result\r\n             })\r\n             console.log(res);\r\n        })     \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\n\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n//import PorpTypes from 'prop-type';\r\n\r\n\r\nexport default class Todolist extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3]\r\n        }\r\n        // var arr = [1,2,{a:100}];\r\n        // 深拷贝\r\n        // var b = JSON.parse(JSON.stringify(arr));\r\n        // b[2].a = 200;\r\n        // console.log(arr);\r\n\r\n        // 对象的拷贝\r\n        // var a= {a:100,b:200};\r\n        // var o = Object.assign({},a);\r\n        // console.log(o===a);\r\n        // console.log(o);\r\n        // Object.keys返回由属性名组成的一个数组\r\n        // Object.keys(a).forEach((item)=>{\r\n        //     console.log(item);\r\n        //     console.log(a[item]);\r\n        // })\r\n        // 尽量不用for in\r\n        // for(var item in a){\r\n        //     console.log(a);\r\n        // }\r\n    }\r\n    addItem=(msg)=>{\r\n        this.setState({\r\n            todo: [...this.state.todo,msg]\r\n        });\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    delItem=(a)=>{\r\n        //this.state.todo.splice(a,1);不要写，不要改变原数组，拷贝一份做相关操作\r\n        //深拷贝和浅拷贝\r\n        //状态（state）\r\n        //不要直接改变。处理状态\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n        //setState是异步的\r\n        this.setState(\r\n            {todo}\r\n        )\r\n    \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing delTodo={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// Todoing.protoTypes = {\r\n//     todo: PorpTypes.array\r\n// }\r\n// Todoing.defaultProps = {\r\n//     todo:[2,3,4],\r\n//     a:100\r\n// }\r\n\r\n","import React,{Component,Fragment} from 'react';\r\n//2、类定义组件\r\n//还可以直接导入如：export default class ShowTime extends.....\r\nclass ShowTime extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            time:new Date().toLocaleString()\r\n        }\r\n        //第一种this的绑定，bind 绑定 this\r\n        this.handleClick=this.handleClick.bind(this);\r\n         console.log('constructor');\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000);\r\n    }\r\n   \r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');\r\n    }\r\n    //事件处理函数绑定 this ：箭头函数\r\n    handleClick=(num,e)=>{\r\n        console.log(num,e);\r\n        console.log('点击成功');\r\n    }\r\n    divClick(num,e){\r\n        console.log(num,e);\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        return (\r\n            <Fragment >\r\n                <div onClick={(ev)=>this.handleClick(1,ev)}>{this.state.time}</div>\r\n                <div onClick={this.divClick.bind(this,333)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出,只能导出一次\r\nexport default ShowTime;\r\n//命名导出(一次性导出多个)\r\n//export {ShowTime};\r\n//export {ShowTime};\r\n//export {ShowTime};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist'\nimport Request from './Request';\nimport ShowTime from './showTime';\n//import {ShowTime} from './showTime'\nimport { exportDefaultSpecifier, directive } from '@babel/types';\n\n\n//组件交互\n//父组件->子组件:调用时在子组件上添加属性\n//在子组件中通过props获取数据\n//子组件->父组件传递数据，调用子组件时往子组件传递一个函数\n//子组件通过props调用该函数\nReactDOM.render(\n\t<Request/>, document.getElementById('root')\n); \n\n//1、JSX 语法\n\n// var str ='hell react';\n// var ele=<h1>{str}</h1>;\n// ReactDOM.render(ele, \n//     document.getElementById('root'));\n\n\n//react创建元素后不可改变,如何更新渲染元素\n// function tick(){ \n//     var ele = <div>\n//                 <h1>\n//                     {new Date( ).toLocaleString()}\n//                 </h1>\n//               </div> ; \n//     ReactDOM.render(ele, document.getElementById('root')); \n// } \n// setInterval(tick, 1000);\n\n// jsx表达式会被react转成一个对象\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'hello react',\n    React.createElement(\n        'h3',\n        {'id':'box2'},\n        'hello'\n    )       \n);\n\n\nvar obj={\n    type:'div',\n    props:{\n        id:'box',\n        class:'top',\n        children: ['hello',{\n            type: 'h1',\n            props: {\n                id: 'h',\n                class: 'h',\n                children: ['react']\n            }\n        }]\n    }\n}\n//加载html文件、浏览器解析html生成DOM树\n//link加载css文件，解析每条css规则，和DOM树结合生成render tree(渲染树)、浏览器的渲染引擎渲染render tree\n\n//页面回流（重排）：页面重新渲染一遍，内容改变，大小改变，结构改变(减少回流)\n//页面重绘：把字体颜色，背景颜色等样式改变\n\n//1、node.offsetLeft\\node.offsetWidth等慎用\n// var root=document.getElementById('root');\n// var width =root.offsetWidth;\n// setInterval(function(){\n//     width+=1;\n//     root.style.width=width+'px';\n// },100)\n\n//display width,height,font-size改变会引起页面回流\n//document.body.style.width='100px';不建议，因为每改一条都要回流一次\n//2、建议声明一个css类\n// .change{\n//     width:100px;\n// }\n// document.body.className = 'change';\n\n//3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;只会回流一次，性能好\n// console.timeEnd('a');\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    var fr = document.createDocumentFragment();\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i] === 'object'){\n                    render(props[item][i],ele);\n                }else{\n                    var txt = document.createTextNode(props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fr.appendChild(ele);\n    container.appendChild(fr);\n    \n}\n// render(obj, \n//     document.getElementById('root')); \n\n//组件,组件名大写字母开头\n// function Hello( props ) { \n// \treturn <h1>Hello { props.name }</h1>\n// } \n// ReactDOM.render(\n// \t<Hello name=\"React\"/>, document.getElementById('root')\n// ); \n\n\n//1、通过函数定义组件（无生命周期函数）\n//当只是渲染结构的时候，就用函数定义\nfunction Todo(props){\n    return (\n        <div>\n            {/* 条件渲染 */}\n            {props.list.length>=4&&<h1>todo</h1>}\n            {props.list.length>=4?<h1>todo</h1>:''}\n            {\n                props.list.map((item,index)=>{\n                    \n                if(index%2===0){\n                    return <li key={item}>{item}</li>\n                }\n                })\n\n            }\n            <ul>\n                {\n                    // 循环渲染\n                props.list.map(function(item,index){\n                    return <li key={index}>{item}</li>\n                })\n                }\n            </ul>\n         </div>   \n    )\n}\n\n//var item =[<li>1</li>,<li>2</li>,<li>3</li>,<li>4</li>,<li>5</li>];\n// var item=[1,2,3,4];\n// ReactDOM.render(\n// \t<Todo list={item}/>, document.getElementById('root')\n// ); \n\n\n\n\n"],"sourceRoot":""}